{"version":3,"sources":["Pages/Navbar.js","Pages/history.js","Pages/IntroTrending.js","Pages/IntroTJ.js","Pages/Intro.js","graphql/Queries.js","reducers/mangaReducer.js","contexts/MangaContext.js","Pages/mangaInfo.js","Pages/tagBubble.js","Pages/Home.js","Pages/ReadingTitle.js","Pages/editManga.js","hooks/useInputState.js","Pages/MangaDetails.js","hooks/useToggleState.js","Pages/MangaList.js","Pages/MangaForm.js","Pages/ReadingList.js","Pages/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["withRouter","props","console","log","Navbar","sticky","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","history","GridItem","Card","Image","src","image","wrapped","ui","Content","Header","title","Meta","rating","score","starRatedColor","numberOfStars","name","starDimension","starSpacing","genre","join","IntroTrending","state","error","isLoaded","items","getAnime","query","variables","a","axios","post","response","data","setState","Page","media","this","message","map","item","english","romaji","coverImage","large","meanScore","genres","Component","IntroTJ","Intro","Button","size","GET_MANGA_QUERY","gql","mangaReducer","action","type","manga","status","chapter","uuidv4","filter","MangaContext","createContext","MangaContextProvider","useReducer","localData","localStorage","getItem","JSON","parse","mangas","dispatch","useEffect","setItem","stringify","Provider","value","children","MangaInfo","TagBubble","NewMangaForm","useContext","useState","setStatus","setChapter","setGenres","successfullyAdded","setSuccessfullyAdded","mangaSearched","setMangaSearched","searchFieldValue","setSearchFieldValue","useLazyQuery","search","getManga","loading","onSubmit","e","preventDefault","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","target","Append","onClick","Media","synonyms","native","alt","ReactHtmlParser","description","averageScore","icon","faFlag","countryOfOrigin","faHeart","popularity","externalLinks","slice","link","index","url","faLink","defaultChecked","htmlFor","for","min","required","block","tags","tag","rankings","rank","context","bannerImage","characters","edges","Object","keys","c","node","full","style","position","height","overflow","marginBottom","text","ideal","readMoreText","recommendations","i","mediaRecommendation","ReadingTitle","length","EditMangaForm","stat","task","toggleEditForm","currentStatus","setCurrentStatus","initialValue","setValue","useInputState","handleChange","clearValue","stopPropagation","checked","MangaDetails","useToggleState","isEditing","toggle","overflowY","MangaList","reverse","MangaForm","client","ApolloClient","cache","InMemoryCache","uri","ReadingList","Routes","path","exact","component","from","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e6df1db.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, Form, Button } from \"react-bootstrap\";\n// import Button from \"react-bootstrap/Button\";\nimport { withRouter, Link } from \"react-router-dom\";\n// import from \"react-rout\"\n\nconst Navigation = (props) => {\n  console.log(props);\n  return (\n    <Navbar sticky=\"top\" bg=\"primary\" variant=\"dark\">\n      <Navbar.Brand href=\"#/\">MTracker</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#/\">Home</Nav.Link>\n          <Nav.Link href=\"#/Info\">Info</Nav.Link>\n          <Nav.Link href=\"#/ReadingList\">Reading List</Nav.Link>\n          {/* <Link to=\"/\">Home</Link> */}\n          {/* <Nav.Link href=\"/Info\">Info</Nav.Link>\n          <Nav.Link href=\"/ReadingList\">Reading List</Nav.Link> */}\n        </Nav>\n        {/* <Button variant=\"primary\">Primary</Button>{\" \"} */}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default withRouter(Navigation);\n","import { createBrowserHistory as history } from \"history\";\n\nexport default history();\n","import React, { Component } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_MANGA_QUERY } from \"../graphql/QueriesTrending\";\nimport axios from \"axios\";\nimport {\n  FlippingCard,\n  FlippingCardBack,\n  FlippingCardFront,\n} from \"react-ui-cards\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport \"./IntroTrending.css\";\nimport Rating from \"react-rating\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLink } from \"@fortawesome/free-solid-svg-icons\";\nimport StarRatings from \"react-star-ratings\";\n\n// function IntroTrending() {\n//   return <div></div>;\n// }\n\nconst GridItem = (props) => (\n  <>\n    {/* <FlippingCard>\n      <FlippingCardBack>\n        <h1>{props.title}</h1>\n      </FlippingCardBack>\n      <FlippingCardFront>\n        <img className=\"grid__img\" src={props.image} alt=\"manga name\" />\n      </FlippingCardFront>\n    </FlippingCard> */}\n    <div className=\"theCard\">\n      <Card className=\"card\">\n        <Image src={props.image} wrapped ui={false} />\n        <Card.Content>\n          <Card.Header className=\"title\">{props.title}</Card.Header>\n          <Card.Meta>\n            {/* <Rating\n            emptySymbol=\"fa fa-star-o fa-2x\"\n            fullSymbol=\"fa fa-star fa-2x\"\n            initialRating={(props.score / 100) * 5}\n            readonly\n          /> */}\n\n            <StarRatings\n              rating={(props.score / 100) * 5}\n              starRatedColor=\"gold\"\n              //   changeRating={this.changeRating}\n              numberOfStars={5}\n              name=\"rating\"\n              starDimension={20}\n              starSpacing={3}\n              //   starHoverColor=\"red\"\n            />\n            <span></span>\n            <p className=\"listingGenre\">{props.genre.join(\", \")}</p>\n          </Card.Meta>\n        </Card.Content>\n      </Card>\n    </div>\n    {/* <div className=\"grid__flex\"></div> */}\n  </>\n);\n\nclass IntroTrending extends Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    items: [],\n  };\n\n  getAnime = async (query, variables) => {\n    try {\n      const response = await axios.post(\"https://graphql.anilist.co\", {\n        query,\n        variables,\n      });\n\n      // Log the response so we can look at it in the console\n      console.log(response.data);\n\n      // Set the data to the state\n      this.setState(() => ({\n        isLoaded: true,\n        items: response.data.data.Page.media,\n      }));\n    } catch (error) {\n      // If there's an error, set the error to the state\n      this.setState(() => ({ error }));\n    }\n  };\n\n  componentDidMount() {\n    // This is the GraphQL query\n    // TRENDING_DESC, POPULARITY_DESC\n    // countryOfOrigin: KR\n    const query = `\n    query {\n      Page(perPage: 15) {\n        media(isAdult: false, sort: POPULARITY_DESC, type: MANGA, genre_not_in: [\"Psychological\", \"Ecchi\", \"Yaoi\", \"Yuri\"]) {\n          id\n          title {\n            romaji\n            english\n          }\n          genres\n          meanScore\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    `;\n\n    // These variables are optional, leave empty for now\n    const variables = {};\n\n    // We call the method here to execute our async function\n    this.getAnime(query, variables);\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n\n    if (error) {\n      return <div>{error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"grid\">\n          {items.map((item) => (\n            <GridItem\n              key={item.id}\n              title={\n                item.title.english ? item.title.english : item.title.romaji\n              }\n              image={item.coverImage.large}\n              score={item.meanScore}\n              genre={item.genres}\n            />\n          ))}\n        </div>\n      );\n    }\n  }\n}\n\nexport default IntroTrending;\n","import React, { Component } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_MANGA_QUERY } from \"../graphql/QueriesTrending\";\nimport axios from \"axios\";\nimport {\n  FlippingCard,\n  FlippingCardBack,\n  FlippingCardFront,\n} from \"react-ui-cards\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\n\nimport Rating from \"react-rating\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLink } from \"@fortawesome/free-solid-svg-icons\";\nimport StarRatings from \"react-star-ratings\";\nimport \"./IntroTrending.css\";\n\n// function IntroTrending() {\n//   return <div></div>;\n// }\n\nconst GridItem = (props) => (\n  <>\n    {/* <FlippingCard>\n      <FlippingCardBack>\n        <h1>{props.title}</h1>\n      </FlippingCardBack>\n      <FlippingCardFront>\n        <img className=\"grid__img\" src={props.image} alt=\"manga name\" />\n      </FlippingCardFront>\n    </FlippingCard> */}\n    <div className=\"theCard\">\n      <Card className=\"card\">\n        <Image src={props.image} wrapped ui={false} />\n        <Card.Content>\n          <Card.Header className=\"title\">{props.title}</Card.Header>\n          <Card.Meta>\n            {/* <Rating\n            emptySymbol=\"fa fa-star-o fa-2x\"\n            fullSymbol=\"fa fa-star fa-2x\"\n            initialRating={(props.score / 100) * 5}\n            readonly\n          /> */}\n\n            <StarRatings\n              rating={(props.score / 100) * 5}\n              starRatedColor=\"gold\"\n              //   changeRating={this.changeRating}\n              numberOfStars={5}\n              name=\"rating\"\n              starDimension={20}\n              starSpacing={3}\n              //   starHoverColor=\"red\"\n            />\n            {/* <p>{props.score}</p> */}\n            <p className=\"listingGenre\">{props.genre.join(\", \")}</p>\n          </Card.Meta>\n        </Card.Content>\n      </Card>\n    </div>\n    {/* <div className=\"grid__flex\"></div> */}\n  </>\n);\n\nclass IntroTJ extends Component {\n  state = {\n    error: null,\n    isLoaded: false,\n    items: [],\n  };\n\n  getAnime = async (query, variables) => {\n    try {\n      const response = await axios.post(\"https://graphql.anilist.co\", {\n        query,\n        variables,\n      });\n\n      // Log the response so we can look at it in the console\n      console.log(response.data);\n\n      // Set the data to the state\n      this.setState(() => ({\n        isLoaded: true,\n        items: response.data.data.Page.media,\n      }));\n    } catch (error) {\n      // If there's an error, set the error to the state\n      this.setState(() => ({ error }));\n    }\n  };\n\n  componentDidMount() {\n    // This is the GraphQL query\n    // TRENDING_DESC, POPULARITY_DESC\n    // countryOfOrigin: KR\n    const query = `\n    query {\n      Page(perPage: 15) {\n        media(isAdult: false, sort: POPULARITY_DESC, type: MANGA, countryOfOrigin: KR, genre_in: [\"Fantasy\", \"Romance\"], genre_not_in: [\"Psychological\", \"Ecchi\", \"Yaoi\", \"Yuri\", \"Adventure\"]) {\n          id\n          title {\n            romaji\n            english\n          }\n          meanScore\n          genres\n          coverImage {\n            large\n          }\n        }\n      }\n    }\n    `;\n\n    // These variables are optional, leave empty for now\n    const variables = {};\n\n    // We call the method here to execute our async function\n    this.getAnime(query, variables);\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n\n    if (error) {\n      return <div>{error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"grid\">\n          {items.map((item) => (\n            <GridItem\n              key={item.id}\n              title={\n                item.title.english ? item.title.english : item.title.romaji\n              }\n              image={item.coverImage.large}\n              score={item.meanScore}\n              genre={item.genres}\n            />\n          ))}\n        </div>\n      );\n    }\n  }\n}\n\nexport default IntroTJ;\n","import React from \"react\";\nimport { Button, Nav } from \"react-bootstrap\";\nimport history from \"./history\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\n// import { Navbar, Nav, } from \"react-bootstrap\";\nimport IntroTrending from \"./IntroTrending\";\nimport IntroTJ from \"./IntroTJ\";\nimport \"./Intro.css\";\n\nfunction Intro() {\n  //   const client = new ApolloClient({\n  //     cache: new InMemoryCache(),\n  //     uri: \"https://graphql.anilist.co\",\n  //   });\n  return (\n    <div>\n      {/* <button onClick={}></button> */}\n      {/* <div\n        class=\"title-line-wrapper\"\n        style=\"opacity: 1; transform: translate(0px, 0px);\"\n      >\n        <div class=\"title-line\" style=\"transform: translateX(-64px);\"></div>\n      </div> */}\n      <div className=\"theHeader\">\n        <h1 className=\"theMainTitle\">Welcome to MTracker</h1>\n        <h5 className=\"theMainDesc\">\n          MTracker is a site that allows users' to search up and track any\n          manga, manhwa or manhua information. MTracker also saves the users'\n          reading status and chapter without an account!\n        </h5>\n        <br></br>\n        {/* <Button variant=\"btn btn-success\" onClick={() => history.push(\"/Info\")}>\n        Click button to search a manga\n      </Button> */}\n        {/* <Nav.Link href=\"/Info\">Click to search a manga</Nav.Link> */}\n        <Button size=\"lg\" href=\"#/Info\">\n          Click To Search:\n        </Button>\n      </div>\n      {/* <ApolloProvider client={client}> */}\n      <h1>Top Trending:</h1>\n      <IntroTrending />\n      <h1>Julianne's Top Manhwa Trending:</h1>\n      <p>Genres: Fantasy and Romance</p>\n      <IntroTJ />\n      {/* </ApolloProvider> */}\n    </div>\n  );\n}\n\nexport default Intro;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_MANGA_QUERY = gql`\n  query Media($search: String!) {\n    Media(search: $search, isAdult: false, type: MANGA) {\n      id\n      title {\n        romaji\n        english\n        native\n      }\n      coverImage {\n        large\n        medium\n      }\n      chapters\n      description\n      status\n      countryOfOrigin\n      popularity\n      rankings {\n        context\n      }\n      tags {\n        name\n      }\n      externalLinks {\n        url\n      }\n      characters(page: 1, perPage: 5) {\n        edges {\n          node {\n            id\n            description\n            siteUrl\n            name {\n              first\n              last\n              full\n              native\n            }\n            image {\n              large\n              medium\n            }\n          }\n        }\n      }\n      recommendations(page: 1, perPage: 5) {\n        edges {\n          node {\n            id\n            mediaRecommendation {\n              id\n              averageScore\n              genres\n              synonyms\n              title {\n                romaji\n                english\n                native\n                userPreferred\n              }\n              coverImage {\n                extraLarge\n                large\n                medium\n                color\n              }\n            }\n            rating\n          }\n        }\n      }\n      bannerImage\n      averageScore\n      genres\n      synonyms\n    }\n  }\n`;\n","import { v4 as uuidv4 } from \"uuid\";\n\nexport const mangaReducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_MANGA\":\n      return [\n        ...state,\n        {\n          title: action.manga.title,\n          status: action.manga.status,\n          chapter: action.manga.chapter,\n          genres: action.manga.genres,\n          id: uuidv4(),\n          image: action.manga.image,\n        },\n      ];\n    case \"REMOVE_MANGA\":\n      return state.filter((manga) => manga.id !== action.id);\n    case \"EDIT_MANGA\":\n      return state.map((manga) =>\n        manga.id === action.id\n          ? {\n              ...manga,\n              chapter: action.chapter,\n              status: action.status,\n            }\n          : manga\n      );\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useState, useEffect, useReducer } from \"react\";\nimport { mangaReducer } from \"../reducers/mangaReducer\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const MangaContext = createContext();\n\nconst MangaContextProvider = (props) => {\n  const [mangas, dispatch] = useReducer(mangaReducer, [], () => {\n    const localData = localStorage.getItem(\"mangas\");\n    return localData ? JSON.parse(localData) : [];\n  });\n\n  // const [mangas, setMangas] = useState([\n  //   // {\n  //   //   title: \"Who Made Me A Princess\",\n  //   //   status: \"Finished\",\n  //   //   chapter: 4,\n  //   //   genres: [\"Romance\", \"Comedy\"],\n  //   //   id: 1,\n  //   // },\n  //   // {\n  //   //   title: \"Lady Baby\",\n  //   //   status: \"Finished\",\n  //   //   genres: [\"Fantasy\", \"Romance\"],\n  //   //   chapter: 10,\n  //   //   id: 2,\n  //   // },\n  // ]);\n  // const addManga = (title, status, chapter, genres) => {\n  //   setMangas([...mangas, { title, status, chapter, genres, id: uuidv4() }]);\n  // };\n  // const removeManga = (id) => {\n  //   setMangas(mangas.filter((manga) => manga.id !== id));\n  // };\n  useEffect(() => {\n    localStorage.setItem(\"mangas\", JSON.stringify(mangas));\n    // set item whenever add it to the list\n  }, [mangas]);\n  return (\n    // <MangaContext.Provider value={{ mangas, addManga, removeManga }}>\n    //   {props.children}\n    // </MangaContext.Provider>\n    <MangaContext.Provider value={{ mangas, dispatch }}>\n      {props.children}\n    </MangaContext.Provider>\n  );\n};\n\nexport default MangaContextProvider;\n","function MangaInfo({ title }) {\n  return <b>{title}</b>;\n}\n\nexport default MangaInfo;\n","import React from \"react\";\n\nfunction TagBubble(props) {\n  return <div>{props.name}</div>;\n}\n\nexport default TagBubble;\n","import React, { useContext, useState, Text } from \"react\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { GET_MANGA_QUERY } from \"../graphql/Queries\";\nimport { MangaContext } from \"../contexts/MangaContext\";\nimport MangaInfo from \"./mangaInfo\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport \"./Home.css\";\n// import { Formik, Form, Field } from \"formik\";\nimport { InputGroup, Button, FormControl, Card } from \"react-bootstrap\";\nimport TagBubble from \"./tagBubble\";\nimport ReadMoreReact from \"read-more-react\";\nimport StarRatings from \"react-star-ratings\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart, faLink, faFlag } from \"@fortawesome/free-solid-svg-icons\";\nimport {\n  FlippingCard,\n  FlippingCardBack,\n  FlippingCardFront,\n} from \"react-ui-cards\";\nimport {\n  Element,\n  Events,\n  animateScroll as scroll,\n  scrollSpy,\n  scroller,\n} from \"react-scroll\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport Intro from \"./Intro\";\n// import FormControl from \"react-bootstrap/InputGroup\";\n// function selectOnlyThis(id) {\n//   for (var i = 1; i <= 4; i++) {\n//     document.getElementById(\"Check\" + i).checked = false;\n//   }\n//   document.getElementById(id).checked = true;\n// }\n\nconst NewMangaForm = () => {\n  const { dispatch } = useContext(MangaContext);\n  const [title, setTitle] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [chapter, setChapter] = useState(0);\n  const [genres, setGenres] = useState([]);\n  const [successfullyAdded, setSuccessfullyAdded] = useState(false);\n\n  const [mangaSearched, setMangaSearched] = useState(\"\");\n  const [searchFieldValue, setSearchFieldValue] = useState(\"\");\n\n  const [getManga, { loading, data, error }] = useLazyQuery(GET_MANGA_QUERY, {\n    variables: { search: mangaSearched },\n  });\n  if (error)\n    return (\n      <>\n        <h1>Sorry not found</h1>\n        <Button href=\"/Info\">Return back</Button>\n      </>\n    );\n  if (data) {\n    // console.log(data);\n    console.log(loading);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log(title, status);\n    setGenres(data.Media.genres);\n    // console.log(genres);\n    console.log(data.Media.genres);\n    if (data.Media.title.english == null) {\n      //   setTitle(data.Media.synonyms[0]);\n      if (data.Media.synonyms[0] != null) {\n        // addManga(data.Media.synonyms[0], status, chapter, data.Media.genres);\n        dispatch({\n          type: \"ADD_MANGA\",\n          manga: {\n            title: data.Media.synonyms[0],\n            status,\n            chapter,\n            genres: data.Media.genres,\n            image: data.Media.coverImage.large,\n          },\n        });\n      } else {\n        dispatch({\n          type: \"ADD_MANGA\",\n          manga: {\n            title: data.Media.title.romaji,\n            status,\n            chapter,\n            genres: data.Media.genres,\n            image: data.Media.coverImage.large,\n          },\n        });\n        // addManga(data.Media.title.romaji, status, chapter, data.Media.genres);\n      }\n    } else {\n      dispatch({\n        type: \"ADD_MANGA\",\n        manga: {\n          title: data.Media.title.english,\n          status,\n          chapter,\n          genres: data.Media.genres,\n          image: data.Media.coverImage.large,\n        },\n      });\n      //   addManga(data.Media.title.english, status, chapter, data.Media.genres);\n      //   setTitle(data.Media.title.english);\n    }\n\n    setSuccessfullyAdded(true);\n\n    // setTitle(\"\");\n    // setStatus(\"\");\n    // setChapter(0);\n    // setGenres([]);\n  };\n\n  return (\n    <div>\n      {/* <form>\n        <input\n          type=\"text\"\n          value={title}\n          placeholder=\"Manhwa name\"\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n        <input\n          type=\"text\"\n          value={status}\n          placeholder=\"Status\"\n          onChange={(e) => setStatus(e.target.value)}\n          required\n        />\n        <button onClick={handleSubmit} type=\"submit\" value=\"Add Manhwa\">\n          Submit\n        </button>\n      </form> */}\n      <h3 className=\"theOverallTitle\">\n        Enter the name of a{\" \"}\n        <span className=\"threeMs\">Manga, Manhwa, or Manhua:</span>\n      </h3>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          setMangaSearched(searchFieldValue);\n          getManga();\n          setSearchFieldValue(\"\");\n          console.log(genres);\n          setSuccessfullyAdded(false);\n        }}\n      >\n        {/* <input\n          type=\"text\"\n          placeholder=\"Manhwa name...\"\n          value={searchFieldValue}\n          // onChange={(event) => {\n\n          //   setMangaSearched(event.target.value);\n          // }}\n          onChange={(e) => {\n            setSearchFieldValue(e.target.value);\n          }}\n          // onClick={() => getManga()}\n\n          // A SEPARATE FUNCTION CALLED ADD THIS COMPONENT\n        ></input> */}\n        <div className=\"mb-3\">\n          <InputGroup>\n            <FormControl\n              placeholder=\"Enter title\"\n              aria-label=\"Manga title\"\n              aria-describedby=\"basic-addon2\"\n              value={searchFieldValue}\n              onChange={(e) => {\n                setSearchFieldValue(e.target.value);\n              }}\n            />\n            <InputGroup.Append>\n              <Button\n                //          type=\"button\"\n                //   id=\"btnsubmit\"\n                onClick={() => {\n                  setMangaSearched(searchFieldValue);\n                  getManga();\n                  setSearchFieldValue(\"\");\n                  // console.log(genres);\n                }}\n                variant=\"outline-secondary\"\n              >\n                Submit\n              </Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </div>\n        {/* <Formik>\n          <Field\n            className=\"inputField\"\n            name=\"name\"\n            label=\"Enter Name\"\n            margin=\"normal\"\n            size=\"large\"\n            //   as={TextField}\n            //   error={touched.name && errors.name}\n            //   helperText={touched.name && errors.name}\n          />\n        </Formik> */}\n        {/* <input type=\"button\" value=\"Submit\" id=\"btnsubmit\" onclick=\"submitForm()\"> </input> */}\n        {/* <button\n          type=\"button\"\n          id=\"btnsubmit\"\n          onClick={() => {\n            setMangaSearched(searchFieldValue);\n            getManga();\n            setSearchFieldValue(\"\");\n            // console.log(genres);\n          }}\n        >\n          Submit\n        </button> */}\n        {/* <button\n          type=\"submit\"\n          id=\"btnsubmit\"\n          value=\"Add Manhwa\"\n\n          //   onClick={() => {\n          //     setMangaSearched(searchFieldValue);\n          //     getManga();\n          //     setSearchFieldValue(\"\");\n          //     console.log(genres);\n          //   }}\n        >\n          Submit\n        </button> */}\n      </form>\n\n      <div className=\"manga\">\n        {data && (\n          <>\n            <div className=\"mangaTitles\">\n              <h1>\n                {data.Media.title.english\n                  ? data.Media.title.english\n                  : data.Media.synonyms[0]\n                  ? data.Media.synonyms[0]\n                  : data.Media.title.romaji}\n                {/* {console.log(data.Media)} */}\n              </h1>\n              <h3>{data.Media.title.native}</h3>\n            </div>\n            <div className=\"mangaBody\">\n              <div className=\"mangaCover\">\n                <img alt=\"cover\" src={data.Media.coverImage.large}></img>\n              </div>\n              {/* <MangaInfo title={data.Media.title.english} /> */}\n              <div className=\"mangaDescAndForm\">\n                <div className=\"mangaWord\">\n                  {/* <p>Description: {data.Media.description}</p> */}\n                  {/* <text>{data.Media.description}</text> */}\n\n                  <div className=\"description\">\n                    <h5>Description:</h5>\n                    {ReactHtmlParser(data.Media.description)}{\" \"}\n                  </div>\n\n                  {/* <ReadMoreReact\n                  text={ReactHtmlParser(data.Media.description)}\n                  // min=\"80\"\n                  // ideal=\"100\"\n                  // max=\"200\"\n                  // readMoreText={readMoreText}\n                /> */}\n\n                  <div className=\"restInfo\">\n                    <div className=\"topInfo\">\n                      <div className=\"infoText\">\n                        {/* <h1>Average Score: {data.Media.averageScore}</h1> */}\n\n                        <h1>\n                          <span className=\"leTitle\">Status: </span>\n                          {data.Media.status}\n                        </h1>\n                        <h1>\n                          <span className=\"leTitle\">Genres: </span>\n                          {data.Media.genres.join(\", \")}\n                        </h1>\n                        {/* <h1>Country: {data.Media.countryOfOrigin}</h1> */}\n                        <div className=\"theStars\">\n                          <StarRatings\n                            rating={(data.Media.averageScore / 100) * 5}\n                            starRatedColor=\"gold\"\n                            //   changeRating={this.changeRating}\n                            numberOfStars={5}\n                            name=\"rating\"\n                            starDimension={28}\n                            starSpacing={1.5}\n                            //   starHoverColor=\"red\"\n                          />\n                        </div>\n                        <div className=\"theIconButton\">\n                          <Button variant=\"light\" className=\"popButton\">\n                            <FontAwesomeIcon size=\"lg\" icon={faFlag} />\n                            <div className=\"popTitle\">\n                              {data.Media.countryOfOrigin}\n                            </div>\n                          </Button>\n\n                          {/* <h1>Popularity: {data.Media.popularity}</h1> */}\n\n                          <Button variant=\"danger\" className=\"popButton\">\n                            <FontAwesomeIcon size=\"lg\" icon={faHeart} />\n                            <div className=\"popTitle\">\n                              {data.Media.popularity}\n                            </div>\n                          </Button>\n                        </div>\n                        <div className=\"links\">\n                          {data.Media.externalLinks &&\n                            data.Media.externalLinks\n                              .slice(0, 3)\n                              .map((link, index) => {\n                                return (\n                                  <div className=\"indLink\">\n                                    <a target=\"_blank\" href={link.url}>\n                                      {/* {index + 1} */}\n                                      <FontAwesomeIcon\n                                        size=\"lg\"\n                                        icon={faLink}\n                                      />\n                                    </a>\n                                  </div>\n                                );\n                              })}\n                        </div>\n                      </div>\n                      <div className=\"saveReading\">\n                        <form>\n                          <div className=\"groupRead\">\n                            <input\n                              type=\"radio\"\n                              name=\"choice\"\n                              value=\"Want to Read\"\n                              defaultChecked\n                              onChange={() => setStatus(\"Want to Read\")}\n                            ></input>\n                            <label htmlFor=\"Want to Read\">Want to Read</label>\n                          </div>\n                          <br></br>\n                          <div className=\"groupRead\">\n                            <input\n                              type=\"radio\"\n                              name=\"choice\"\n                              value=\"Reading\"\n                              onChange={() => setStatus(\"Reading\")}\n                            ></input>\n                            <label htmlFor=\"Reading\">Reading</label>\n                          </div>\n                          <br></br>\n                          <div className=\"groupRead\">\n                            <input\n                              type=\"radio\"\n                              name=\"choice\"\n                              value=\"Finished Reading\"\n                              onChange={() => setStatus(\"Finished Reading\")}\n                            ></input>\n                            <label htmlFor=\"Finished Reading\">\n                              Finished Reading\n                            </label>\n                          </div>\n                        </form>\n                        <div className=\"forChap\">\n                          <label for=\"chapter\">Chapter:</label>\n                          <input\n                            type=\"number\"\n                            name=\"chapter\"\n                            min=\"0\"\n                            onChange={(e) => setChapter(e.target.value)}\n                            required\n                          ></input>\n                        </div>\n                        {successfullyAdded && (\n                          <>\n                            <p>Added Successfully</p>\n                          </>\n                        )}\n                        {/* <button\n                          onClick={handleSubmit}\n                          type=\"submit\"\n                          value=\"Add Manhwa\"\n                        >\n                          Submit\n                        </button> */}\n                        <Button\n                          onClick={handleSubmit}\n                          type=\"submit\"\n                          value=\"Add Manhwa\"\n                          block\n                          variant=\"primary\"\n                        >\n                          Submit\n                        </Button>\n                      </div>\n                    </div>\n\n                    <br></br>\n                    <div className=\"groupTags\">\n                      <h6 className=\"botTags\">Tags:</h6>\n                      <div className=\"bubblesTogether\">\n                        {data.Media.tags.slice(0, 5).map((tag) => {\n                          return (\n                            <div className=\"tagBubble\">\n                              {/* <p>{tag.name}</p> */}\n                              <TagBubble name={tag.name} />\n                              {/* <TagBubble name={tag.name}/> */}\n                              {/* <TagBubble tagName={tag.name} /> */}\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                    <div className=\"groupTags\">\n                      <h6 className=\"botTags\">Ranks:</h6>\n                      <div className=\"bubblesTogether\">\n                        {data.Media.rankings.slice(0, 4).map((rank) => {\n                          return (\n                            <div className=\"tagBubble\">\n                              <TagBubble name={rank.context} />\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  {/* {console.log(\n                  data.Media.tags.map((tag) => {\n                    return <p>{tag.name}</p>;\n                  })\n                )} */}\n\n                  {/* {data.Media.tags.map((tag) => {\n                  <p>tag</p>;\n                })} */}\n                  {/* <h1>synonyms: {data.Media.synonyms[0]}</h1> */}\n                </div>\n              </div>\n            </div>\n            {/* <ReadMoreReact\n              text=\"hello my name is julianne and does this work orka=fdgdkhfgk gskdhfgg dkghkd gkfdhg ghdfk gdhgk hdfkgdkughd rghk ueshg hdg hgkhfusdghd gfkContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obsure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.3(The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Icomes from a line in section 1.10.32.The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for tho\nse interested. Sections 1.10.32 and 1.10.33 from  by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\"\n            /> */}\n            {data.Media.bannerImage && (\n              <div>\n                <img\n                  alt=\"banner\"\n                  className=\"bannerImg\"\n                  src={data.Media.bannerImage}\n                ></img>\n                {/* \n                <Card className=\"bg-dark text-white\">\n                  <Card.Img src={data.Media.bannerImage} alt=\"Card image\" />\n                  <Card.ImgOverlay>\n                    <Card.Title>Card title</Card.Title>\n                    <Card.Text>\n                      This is a wider card with supporting text below as a\n                      natural lead-in to additional content. This content is a\n                      little bit longer.\n                    </Card.Text>\n                    <Card.Text>Last updated 3 mins ago</Card.Text>\n                  </Card.ImgOverlay>\n                </Card> */}\n              </div>\n            )}\n\n            {/* <div className=\"oneChar\">\n                      {/* {c.node.name.full} */}\n            {/* {console.log(c)} */}\n\n            {/* {data.Media.characters.edges[c].node.image.medium !=\n                      \"https://s4.anilist.co/file/anilistcdn/character/medium/default.jpg\" ? ( */}\n            {/* <img\n                        alt=\"character img\"\n                        src={data.Media.characters.edges[c].node.image.large}\n                      ></img>\n                      {/* ) : (\n                        <p>none</p>\n                      )} */}\n            {/* <span className=\"character\">\n                        {data.Media.characters.edges[c].node.name.full}\n                      </span>\n                    </div> */}\n\n            {/* <Element name=\"scroll-container-second-element\" style={{\n              marginBottom: '200px'\n            }}>\n              second element inside container\n          </Element> */}\n\n            {data.Media.characters.edges[0] && (\n              <div className=\"characterList\">\n                <h1 className=\"theCharTitle\">Characters:</h1>\n                {/* {console.log(data.Media.characters.edges)} */}\n                {Object.keys(data.Media.characters.edges).map((c) => {\n                  return (\n                    <div className=\"oneChar\">\n                      <FlippingCard>\n                        <FlippingCardBack>\n                          {/* <br></br> */}\n                          {data.Media.characters.edges[c].node.description ? (\n                            <div>\n                              <h4>\n                                {data.Media.characters.edges[c].node.name.full}\n                              </h4>\n                              <Element\n                                className=\"element\"\n                                id=\"scroll-container\"\n                                style={{\n                                  position: \"relative\",\n                                  height: \"200px\",\n                                  overflow: \"scroll\",\n                                  marginBottom: \"100px\",\n                                }}\n                              >\n                                {/* <Element\n                name=\"scroll-container-first-element\"\n                style={{\n                  marginBottom: \"200px\",\n                }}\n              > */}\n                                <ReadMoreReact\n                                  id=\"charDesc\"\n                                  text={\n                                    data.Media.characters.edges[c].node\n                                      .description\n                                  }\n                                  //   text={ReactHtmlParser(\n                                  //     data.Media.characters.edges[c].node\n                                  //       .description\n                                  //   )}\n                                  ideal={200}\n                                  readMoreText=\"Read More\"\n                                ></ReadMoreReact>\n                              </Element>\n                            </div>\n                          ) : (\n                            <h2 className=\"onlyCharName\">\n                              {data.Media.characters.edges[c].node.name.full}\n                            </h2>\n                          )}\n                          {/* Content that will be displayed on the back of the card */}\n                        </FlippingCardBack>\n                        <FlippingCardFront>\n                          <img\n                            alt=\"character img\"\n                            src={\n                              data.Media.characters.edges[c].node.image.large\n                            }\n                          ></img>\n                        </FlippingCardFront>\n                      </FlippingCard>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n\n            {/* <img\n                        alt=\"rec title\"\n                        src={\n                          data.Media.recommendations.edges[i].node\n                            .mediaRecommendation.coverImage.large\n                        }\n                      ></img>\n                      <span className=\"character\">\n\n                        {data.Media.recommendations.edges[i].node\n                          .mediaRecommendation.title.english\n                          ? data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.title.english\n                          : data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.synonyms[0]\n                          ? data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.synonyms[0]\n                          : data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.title.romaji}\n                      </span> */}\n\n            {data.Media.recommendations.edges[0] && (\n              <div className=\"recList\">\n                <h1 className=\"theCharTitle\">Recommendations:</h1>\n                {Object.keys(data.Media.recommendations.edges).map((i) => {\n                  return (\n                    <div className=\"oneChar\">\n                      <FlippingCard>\n                        <FlippingCardBack>\n                          {/* <h4>\n                            {data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.title.english\n                              ? data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.title.english\n                              : data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.synonyms[0]\n                              ? data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.synonyms[0]\n                              : data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.title.romaji}\n                          </h4> */}\n\n                          <h2 className=\"onlyTitleName\">\n                            {data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.title.english\n                              ? data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.title.english\n                              : data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.synonyms[0]\n                              ? data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.synonyms[0]\n                              : data.Media.recommendations.edges[i].node\n                                  .mediaRecommendation.title.romaji}\n                          </h2>\n                          {/* <br></br> */}\n                          {/* {\n                            data.Media.recommendations.edges[i].node\n                              .mediaRecommendation.averageScore\n                          } */}\n\n                          {/* Content that will be displayed on the back of the card */}\n                        </FlippingCardBack>\n                        <FlippingCardFront>\n                          <img\n                            alt=\"character img\"\n                            src={\n                              data.Media.recommendations.edges[i].node\n                                .mediaRecommendation.coverImage.large\n                            }\n                          ></img>\n                        </FlippingCardFront>\n                      </FlippingCard>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NewMangaForm;\n\n// function Home() {\n//   const [mangaSearched, setMangaSearched] = useState(\"\");\n//   const [searchFieldValue, setSearchFieldValue] = useState(\"\");\n//   const [getManga, { loading, data, error }] = useLazyQuery(GET_MANGA_QUERY, {\n//     variables: { search: mangaSearched },\n//   });\n//   if (error) return <h1>Error found</h1>;\n//   if (data) {\n//     console.log(data);\n//     console.log(loading);\n//   }\n//   return (\n//     <div className=\"home\">\n//       <h1>Search for Manhwa</h1>\n//       {/* <input\n//         type=\"text\"\n//         placeholder=\"Manhwa name...\"\n//         onChange={(event) => {\n//           setMangaSearched(event.target.value);\n//         }}\n//         // onClick={() => getManga()}\n//       ></input> */}\n//       {/* <input type=\"button\" value=\"Submit\" id=\"btnsubmit\" onclick=\"submitForm()\"> </input> */}\n//       {/* <button type=\"button\" id=\"btnsubmit\" onClick={() => getManga()}>\n//         Submit\n//       </button> */}\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Manhwa name...\"\n//         value={searchFieldValue}\n//         // onChange={(event) => {\n\n//         //   setMangaSearched(event.target.value);\n//         // }}\n//         onChange={(e) => {\n//           setSearchFieldValue(e.target.value);\n//         }}\n//         // onClick={() => getManga()}\n\n//         // A SEPARATE FUNCTION CALLED ADD THIS COMPONENT\n//       ></input>\n//       {/* <input type=\"button\" value=\"Submit\" id=\"btnsubmit\" onclick=\"submitForm()\"> </input> */}\n//       <button\n//         type=\"button\"\n//         id=\"btnsubmit\"\n//         onClick={() => {\n//           setMangaSearched(searchFieldValue);\n//           getManga();\n//           setSearchFieldValue(\"\");\n//         }}\n//       >\n//         Submit\n//       </button>\n\n//       <div className=\"manga\">\n//         {data && (\n//           <>\n//             <h1>{data.Media.title.english}</h1>\n//             <h1>Average Score: {data.Media.averageScore}</h1>\n//             <h1>Genres: {data.Media.genres.join(\", \")}</h1>\n//             <img alt=\"cover\" src={data.Media.coverImage.large}></img>\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Home;\n","import { useContext, useState, useEffect } from \"react\";\nimport { MangaContext } from \"../contexts/MangaContext\";\nimport \"./ReadingTitle.css\";\n\nconst ReadingTitle = () => {\n  const { mangas } = useContext(MangaContext);\n  //   let theMangaLength = mangas.length;\n  //   const [mangasLength, setMangasLength] = useState(0);\n  //   useEffect(() => {\n  //     //   effect\n  //     //   return () => {\n  //     //       cleanup\n  //     //   }\n  //     setMangasLength(mangas.length);\n  //   });\n  return (\n    <>\n      {/* {console.log(mangasLength)} */}\n      {/* <p>Currently you have:</p> */}\n      {console.log(mangas.length)}\n      <h3 className=\"theOverallTitle\">Your Reading List:</h3>\n      <div className=\"readingTitleList\">\n        <>\n          <div className=\"uppertrackList\">Currently you have:⠀</div>\n          <div className=\"theLength\">\n            <b>{mangas.length}</b>{\" \"}\n          </div>\n        </>\n        <div className=\"trackList\">⠀items on your list!</div>\n      </div>\n      {/* <div>Currently you have: {mangasLength} on your list</div> */}\n      {/* <p>Currently you have {mangasLength} in your reading list.</p> */}\n    </>\n  );\n};\n\nexport default ReadingTitle;\n","import React, { useContext, useState } from \"react\";\nimport { MangaContext } from \"../contexts/MangaContext\";\nimport useInputState from \"../hooks/useInputState\";\n// import useStyles from '../styles/EditTodoFormStyles.js';\n// import { EDIT_TODO } from '../constants/actions';\nimport \"./editManga.css\";\nimport { Button } from \"react-bootstrap\";\n\nfunction EditMangaForm({ id, title, stat, task, toggleEditForm }) {\n  const { dispatch } = useContext(MangaContext);\n  //   const [prevStatus, setPrevStatus] = useState(status);\n  //   const yourStatus = status[Object.keys(status)[0]];\n  const [currentStatus, setCurrentStatus] = useState(stat);\n  //   const [searchFieldValue, setSearchFieldValue] = useState(\"\");\n\n  //   const classes = useStyles();\n  //   const dispatch = useContext(DispatchContext);\n\n  const [value, handleChange, clearValue] = useInputState(task);\n\n  //   if (status === \"Want to Read\") {\n\n  //   }\n\n  return (\n    <div className=\"currentReading\">\n      <form\n        onClick={(e) => e.stopPropagation()}\n        //   className={classes.EditTodoForm}\n      >\n        <div className=\"editTitle\">{title}</div>\n        {/* {setYourStatus(status[Object.keys(status)[0]])} */}\n        {/* Your status: {status[Object.keys(status)[0]]} */}\n        {/* {console.log(status)} */}\n        {console.log(stat)}\n\n        <div>\n          <i className=\"editOptions\">Change Status:</i>\n        </div>\n        {/* {console.log(task[Object.keys(task)[0]])} */}\n        {/* {console.log(yourStatus)} */}\n        {/* <p>{status}</p> */}\n        <div className=\"wholeGroupRead\">\n          <div className=\"editgroupRead\">\n            <input\n              type=\"radio\"\n              name=\"choice\"\n              value=\"Want to Read\"\n              checked={currentStatus === \"Want to Read\"}\n              // checked={if (prevStatus) }\n              // checked={() => {\n              //   if (status === \"Want to Read\") {\n              //     return true;\n              //   }\n              // }}\n              onChange={() => setCurrentStatus(\"Want to Read\")}\n            ></input>\n            <label htmlFor=\"Want to Read\">Want to Read</label>\n          </div>\n          <br></br>\n          <div className=\"editgroupRead\">\n            <input\n              type=\"radio\"\n              name=\"choice\"\n              value=\"Reading\"\n              checked={currentStatus === \"Reading\"}\n              // checked={() => {\n              //   if (status === \"Reading\") {\n              //     return true;\n              //   }\n              // }}\n              onChange={() => setCurrentStatus(\"Reading\")}\n            ></input>\n            <label htmlFor=\"Reading\">Reading</label>\n          </div>\n          <br></br>\n          <div className=\"editgroupRead\">\n            <input\n              type=\"radio\"\n              name=\"choice\"\n              value=\"Finished Reading\"\n              checked={currentStatus === \"Finished Reading\"}\n              // checked={() => {\n              //   if (status === \"Finished Reading\") {\n              //     return true;\n              //   }\n              // }}\n              onChange={() => setCurrentStatus(\"Finished Reading\")}\n            ></input>\n            <label htmlFor=\"Finished Reading\">Finished Reading</label>\n          </div>\n        </div>\n        <div className=\"forChap\">\n          <i className=\"editOptions\">Change Chapter:</i>\n          <input\n            // autoFocus\n            value={value}\n            onChange={handleChange}\n            placeholder=\"Chap\"\n            // onChange={(e) => {\n            //     setSearchFieldValue(e.target.value);\n            //   }}\n\n            onClick={(e) => e.stopPropagation()}\n            // className={classes.input}\n          />\n        </div>\n        {/* <button\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch({\n              type: \"EDIT_MANGA\",\n              id,\n              chapter: value,\n              status: currentStatus,\n            });\n            toggleEditForm();\n            clearValue();\n          }}\n        >\n          Submit\n        </button> */}\n        <Button\n          block\n          onClick={(e) => {\n            e.preventDefault();\n            dispatch({\n              type: \"EDIT_MANGA\",\n              id,\n              chapter: value,\n              status: currentStatus,\n            });\n            toggleEditForm();\n            clearValue();\n          }}\n          variant=\"primary\"\n        >\n          Submit\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditMangaForm;\n","import { useState } from \"react\";\n\nexport default (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  const handleChange = (e) => setValue(e.target.value);\n  const clearValue = () => setValue(\"\");\n\n  return [value, handleChange, clearValue];\n};\n","import { useContext } from \"react\";\nimport { MangaContext } from \"../contexts/MangaContext\";\nimport useToggleState from \"../hooks/useToggleState\";\nimport EditMangaForm from \"./editManga\";\nimport \"./MangaDetails.scss\";\nimport { FaTrash, FaRegEdit } from \"react-icons/fa\";\nimport { Button } from \"react-bootstrap\";\n\nconst MangaDetails = ({ manga }) => {\n  const { dispatch } = useContext(MangaContext);\n  const [isEditing, toggle] = useToggleState(false);\n\n  if (isEditing) {\n    return (\n      <li style={{ overflowY: \"hidden\" }} onClick={() => toggle()}>\n        {/* {console.log(manga.status)} */}\n        <EditMangaForm\n          id={manga.id}\n          title={manga.title}\n          stat={manga.status}\n          task={manga.chapter}\n          toggleEditForm={toggle}\n        />\n      </li>\n    );\n  }\n  //   onClick={() => dispatch({ type: \"REMOVE_MANGA\", id: manga.id })}\n  return (\n    <div>\n      <li className=\"listItem\">\n        <img alt={manga.image} src={manga.image}></img>\n        <div className=\"theInfo\">\n          <div className=\"mDtitle\">{manga.title}</div>\n          <div className=\"MDinfo\">\n            <div>{manga.status}</div>\n            <div>\n              <i>Chapter:</i> {manga.chapter}\n            </div>\n            <i>Genres:</i> {manga.genres.join(\", \")}\n          </div>\n          <div className=\"buttons\">\n            {/* <button\n              className=\"button touch edit \"\n              onClick={() => dispatch({ type: \"REMOVE_MANGA\", id: manga.id })}\n            > */}\n            <Button\n              variant=\"outline-secondary\"\n              onClick={() => dispatch({ type: \"REMOVE_MANGA\", id: manga.id })}\n            >\n              <FaTrash />\n            </Button>\n            {/* </button> */}\n            {/* <div class=\"icon icon-expand\">\n              {\" \"}\n              <i class=\"fa fa-bars\"></i>\n            </div> */}\n            {/* <button\n              className=\"button touch edit\"\n            \n            > */}\n            {/* {console.log(manga.status)} */}\n\n            <Button\n              variant=\"outline-info\"\n              onClick={(e) => {\n                e.stopPropagation();\n                toggle();\n              }}\n            >\n              <FaRegEdit />\n            </Button>\n            {/* </button> */}\n          </div>\n        </div>\n      </li>\n    </div>\n    // <li onClick={() => removeManga(manga.id)}>\n    //   <div>{manga.title}</div>\n    //   <div>{manga.status}</div>\n    //   <div>Chapter: {manga.chapter}</div>\n    //   <div>Genres: {manga.genres.join(\", \")}</div>\n    // </li>\n  );\n};\n\nexport default MangaDetails;\n","import { useState } from \"react\";\n\nexport default (initialValue = false) => {\n  const [state, setState] = useState(initialValue);\n  const toggle = () => setState(!state);\n\n  return [state, toggle];\n};\n","import { useContext } from \"react\";\nimport { MangaContext } from \"../contexts/MangaContext\";\nimport MangaDetails from \"./MangaDetails\";\nimport \"./MangaList.css\";\nimport { Button } from \"react-bootstrap\";\n\nconst MangaList = () => {\n  const { mangas } = useContext(MangaContext);\n  return mangas.length ? (\n    <div>\n      {/* {console.log(mangas.reverse())} */}\n      {/* {console.log(mangas.prototype.reverse())} */}\n      <ul className=\"list\">\n        {mangas\n          .slice(0)\n          .reverse()\n          .map((manga) => {\n            return <MangaDetails manga={manga} key={manga.id} />;\n          })}\n      </ul>\n    </div>\n  ) : (\n    <div className=\"noBooks\">\n      <h3>Add to your reading list here:</h3>\n      <Button href=\"#/Info\">Click to search a manga</Button>\n    </div>\n  );\n};\n\nexport default MangaList;\n","import React from \"react\";\n\nimport NewMangaForm from \"./Home\";\nimport MangaContextProvider from \"../contexts/MangaContext\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n} from \"@apollo/client\";\nimport ReadingTitle from \"./ReadingTitle\";\nimport MangaList from \"./MangaList\";\n\nfunction MangaForm() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: \"https://graphql.anilist.co\",\n  });\n  return (\n    <div className=\"App\">\n      {/* <MangaContextProvider> */}\n      {/* main goes here */}\n      {/* <ReadingTitle />\n      <MangaList /> */}\n\n      <ApolloProvider client={client}>\n        <NewMangaForm />\n      </ApolloProvider>\n      {/* </MangaContextProvider> */}\n    </div>\n  );\n}\n\nexport default MangaForm;\n\n// function App() {\n\n//   return (\n//     <div className=\"App\">\n//       <MangaContextProvider>\n//         {/* main goes here */}\n//         <ReadingTitle />\n//         <MangaList />\n\n//         <ApolloProvider client={client}>\n//           <NewMangaForm />\n//         </ApolloProvider>\n//       </MangaContextProvider>\n//     </div>\n//   );\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReadingTitle from \"./ReadingTitle\";\nimport MangaList from \"./MangaList\";\n\nfunction ReadingList() {\n  return (\n    <div>\n      <ReadingTitle />\n      <MangaList />\n      {/* <p>this is reading list</p> */}\n    </div>\n  );\n}\n\nexport default ReadingList;\n","import React, { Component } from \"react\";\nimport {\n  Router,\n  Switch,\n  Route,\n  HashRouter,\n  BrowserRouter,\n  Redirect,\n} from \"react-router-dom\";\n\n// import About from \"./About/About\";\n// import Contact from \"./Contact/Contact\";\n// import Products from \"./Product/Products\";\n\nimport Intro from \"./Intro\";\nimport history from \"./history\";\nimport MangaForm from \"./MangaForm\";\nimport ReadingList from \"./ReadingList\";\nimport MangaContextProvider from \"../contexts/MangaContext\";\nimport Navigation from \"./Navbar\";\n\nexport default class Routes extends Component {\n  render() {\n    return (\n      <>\n        {/* <HashRouter> */}\n        <Switch>\n          <Route path=\"/\" exact component={Intro} />\n          {/* <Route path=\"/\" exact>\n            <Intro />\n          </Route> */}\n          <Redirect from=\"/MTracker\" to=\"/\" />\n          <MangaContextProvider>\n            <Route path=\"/Info\" component={MangaForm} />\n            <Route path=\"/ReadingList\" component={ReadingList} />\n          </MangaContextProvider>\n          {/* reading list */}\n          {/* <Route path=\"/Contact\" component={Contact} />\n          <Route path=\"/Products\" component={Products} /> */}\n        </Switch>\n        {/* </HashRouter> */}\n      </>\n    );\n  }\n}\n","import \"./App.css\";\n// import NewMangaForm from \"./Pages/Home\";\n// import MangaContextProvider from \"./contexts/MangaContext\";\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   HttpLink,\n// } from \"@apollo/client\";\n// import ReadingTitle from \"./Pages/ReadingTitle\";\n// import MangaList from \"./Pages/MangaList\";\nimport Navigation from \"./Pages/Navbar\";\nimport Routes from \"./Pages/Routes\";\nimport {\n  Router,\n  Switch,\n  Route,\n  HashRouter,\n  BrowserRouter,\n} from \"react-router-dom\";\nimport history from \"./Pages/history\";\n\nfunction App() {\n  // const client = new ApolloClient({\n  //   cache: new InMemoryCache(),\n  //   uri: \"https://graphql.anilist.co\",\n  // });\n  return (\n    <div className=\"App\">\n      {/* <MangaContextProvider>\n        {/* main goes here */}\n      {/* <ReadingTitle />\n        <MangaList /> */}\n      {/* \n        <ApolloProvider client={client}>\n          <NewMangaForm />\n        </ApolloProvider>\n      </MangaContextProvider> */}{\" \"}\n      {/* <BrowserRouter history={history}> */}\n      <Navigation />\n      <Routes />\n      {/* </BrowserRouter> */}\n    </div>\n  );\n}\n\nexport default App;\n\n// import \"./App.css\";\n// import NewMangaForm from \"./Pages/Home\";\n// import MangaContextProvider from \"./contexts/MangaContext\";\n// import {\n//   ApolloClient,\n//   InMemoryCache,\n//   ApolloProvider,\n//   HttpLink,\n// } from \"@apollo/client\";\n// import ReadingTitle from \"./Pages/ReadingTitle\";\n// import MangaList from \"./Pages/MangaList\";\n\n// function App() {\n//   const client = new ApolloClient({\n//     cache: new InMemoryCache(),\n//     uri: \"https://graphql.anilist.co\",\n//   });\n//   return (\n//     <div className=\"App\">\n//       <MangaContextProvider>\n//         {/* main goes here */}\n//         <ReadingTitle />\n//         <MangaList />\n\n//         <ApolloProvider client={client}>\n//           <NewMangaForm />\n//         </ApolloProvider>\n//       </MangaContextProvider>\n//     </div>\n//   );\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport history from \"./Pages/history\";\n// var express = require(\"express\");\n// var cors = require(\"cors\");\n// var app = express();\n\n// app.use(cors());\n\n// app.get(\"/products/:id\", function (req, res, next) {\n//   res.json({ msg: \"This is CORS-enabled for all origins!\" });\n// });\n\n// app.listen(80, function () {\n//   console.log(\"CORS-enabled web server listening on port 80\");\n// });\n\n// const corsOptions = {\n//   origin: \"http://localhost:3000\",\n//   credentials: true, //access-control-allow-credentials:true\n//   optionSuccessStatus: 200,\n// };\n// app.use(cors(corsOptions));\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Router> */}\n    <HashRouter history={history}>\n      <App />\n    </HashRouter>\n    {/* </Router> */}\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}